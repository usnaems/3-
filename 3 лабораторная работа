'''
С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц,
B,C,D,E заполняется случайным образом целыми числами в интервале [-10,10].

11.	Формируется матрица F следующим образом: если в С сумма чисел  в нечетных столбцах в области 2 больше,
чем произведение чисел в четных строках в области 1, то поменять в С симметрично области 2 и 3 местами,
иначе Е и В поменять местами несимметрично. При этом матрица А не меняется. После чего вычисляется выражение:
 (К*A)*А– (K * AT). Выводятся по мере формирования А, F и все матричные операции последовательно.
'''






import random
from math import ceil
k=int(input('Введите число K '))

while True:
    n = int(input('Введите число N '))
    if n<6:
        print('Введите число больше 5!')
    else: break
A=[]
for i in range(n):
    A.append([random.randint(-10,10) for i in range(n)])

print('Матрица А')
for i in A:
    print(i)

def split_into_quadrants(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    quadrant_D = [[0 for _ in range(cols // 2)] for _ in range(rows // 2)]
    quadrant_E = [[0 for _ in range(cols // 2)] for _ in range(rows // 2)]
    quadrant_C = [[0 for _ in range(cols // 2)] for _ in range(rows // 2)]
    quadrant_B = [[0 for _ in range(cols // 2)] for _ in range(rows // 2)]

    for i in range(rows):
        for j in range(cols):
            if i < rows // 2 and j < cols // 2:
                quadrant_D[i][j] = matrix[i][j]
            elif i < rows // 2 and j >= ceil(cols / 2):
                quadrant_E[i][j - ceil(cols / 2)] = matrix[i][j]
            elif i >= ceil(rows / 2) and j < cols // 2:
                quadrant_C[i - ceil(rows / 2)][j] = matrix[i][j]
            elif i >= ceil(rows / 2) and j >= ceil(cols / 2):
                quadrant_B[i - ceil(rows / 2)][j - ceil(cols / 2)] = matrix[i][j]

    return quadrant_D, quadrant_E, quadrant_C, quadrant_B

D, E , C , B = split_into_quadrants(A)

print(" Матрица D:")
for row in D:
    print(row)
print("Матрица E:")
for row in E:
    print(row)
print("Матрица C:")
for row in C:
    print(row)
print("Матрица B:")
for row in B:
    print(row)

F = C.copy()

def swapzones1(matrix):

    f = len(matrix)  # Assuming a square matrix

    # Initialize zones as empty lists
    zone1, zone2, zone3, zone4 = [], [], [], []

    for i in range(f):
        for j in range(f):
            if i > j and i + j > f - 1:
                zone2.append(matrix[i][j])

    for j in range(f - 1, -1, -1):
        for i in range(f):
            if  i > j and i + j < f - 1:  # Upper left zone
                zone3.append(matrix[i][j])

    c1,c2 = 0,0
    for i in range(f):
        for j in range(f):
            if i > j and i + j > f - 1:
                matrix[i][j] = zone3[c1]
                c1 += 1

    for j in range(f - 1, -1, -1):
            for i in range(f):
                if i > j and i + j < f - 1:  # Upper left zone
                    matrix[i][j] = zone2[c2]
                    c2 += 1
    #return zone2, zone3
    return matrix

def swapzones2(matrix):

    f = len(matrix)  # Assuming a square matrix

    # Initialize zones as empty lists
    zone1, zone2, zone3, zone4 = [], [], [], []

    for i in range(f):
        for j in range(f - 1, -1, -1):
            if i > j and i + j > f - 1:
                zone2.append(matrix[i][j])

    for j in range(f - 1, -1, -1):
        for i in range(f - 1, -1, -1):
            if i > j and i + j < f - 1:  # Upper left zone
                zone3.append(matrix[i][j])

    c1,c2 = 0,0
    for i in range(f):
        for j in range(f):
            if i > j and i + j > f - 1:
                matrix[i][j] = zone3[c1]
                c1 += 1

    for j in range(f - 1, -1, -1):
            for i in range(f):
                if i > j and i + j < f - 1:  # Upper left zone
                    matrix[i][j] = zone2[c2]
                    c2 += 1
    #return zone2, zone3
    return matrix

summ = 0
for i in range(len(F)):
    for j in range(len(F)):
        if j%2 != 0 and i > j and i + j > len(F) - 1:
            summ+=F[i][j]

mult = 1
for i in range(len(F)):
    for j in range(len(F)):
        if i%2 == 0 and i < j and i + j < len(F) - 1:
            mult*=F[i][j]

if summ > mult:
    swapzones1(F)
else:
    swapzones2(F)

print('Матрица F')
for i in F:
    print(i)


def transpose_matrix(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    transposed_matrix = [[0 for _ in range(rows)] for _ in range(cols)]

    for i in range(rows):
        for j in range(cols):
            transposed_matrix[j][i] = matrix[i][j]
    return transposed_matrix

def multiply_matrix(m, k):
    result = []
    for row in m:
        new_row = [k * element for element in row]
        result.append(new_row)
    return result

def multiply_matrices(matrix1, matrix2):
    result = []
    for i in range(len(matrix1)):
        row = []
        for j in range(len(matrix2[0])):
            val = 0
            for k in range(len(matrix2)):
                val += matrix1[i][k] * matrix2[k][j]
            row.append(val)
        result.append(row)
    return result

def subtract_matrices(matrix1, matrix2):
    result = []
    for i in range(len(matrix1)):
        row = []
        for j in range(len(matrix1[0])):
            row.append(matrix1[i][j] - matrix2[i][j])
        result.append(row)
    return result

print('выражение: (К*A)*А – (K * AT)')
expression = subtract_matrices(multiply_matrices(multiply_matrix(A,k),A),multiply_matrix(transpose_matrix(A),k))
for i in expression:
    print(i)









